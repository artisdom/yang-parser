
module = <ows> <"module"> <ws> identifier <blk-open>
         *( namespace
          / prefix 
          / organization
          / contact     
          / description 
          / revision
          / identity
          / typedef
          / container
          / rpc
          / notification
          )
         <blk-close> <ows>

revision = <ows> <"revision"> <ws> iso-date <blk-open>
           *( description
            / reference )
           <blk-close>

identity = <ows> <"identity"> <ws> identifier <blk-open>
           *( description
            / base )
           <blk-close>

typedef = <ows> <"typedef"> <ws> identifier <blk-open>
          *( description  
           / reference
           / type
           / default )
          <blk-close>

container = container-simple / container-composite
<container-simple>    = <ows> <"container"> <ws> identifier <term>
<container-composite> = <ows> <"container"> <ws> identifier <blk-open>
          ; [container-extension-stmt]
            *( presence 
             / description 
           ;   uses     ; #todo if missing sends instaparse -> infinite loop!
           ; / config   ; #todo    (same) for turing-machine.yang
             / leaf
           ; / leaf-list 
           ; / list 
           ; / container 
             )
           <blk-close>

rpc = <ows> <"rpc"> <ws> identifier <blk-open>
      *( rpc-input 
       / description )
      <blk-close>

rpc-input = <ows> <"input"> <blk-open>
            *( leaf 
             / description )
            <blk-close>

notification =  <ows> <"notification"> <ws> identifier <blk-open>
                *( leaf 
                 / description )
                <blk-close>

leaf = <ows> <"leaf"> <ws> identifier <blk-open>
       *( type
        / config
        / mandatory
        / default
        / description  )
       <blk-close>

<type>              = type-simple / type-composite
type-simple         = <ows> <"type"> <ws> identifier <term>
type-composite      = <ows> <"type"> <ws> identifier <blk-open> 
                      *( length
                       ; / fraction-digits
                         / range
                       ; / pattern
                         / enum 
                         / base 
                       ; / type 
                       ; / bit 
                       )
                      <blk-close> 

range               = range-simple / range-composite
range-simple        = <ows> <"range"> <ws> string <term>
range-composite     = <ows> <"range"> <ws> string <blk-open> 
                      *( description
                       / error-message )
                      <blk-close> 

<enum>              = enum-simple / enum-composite
enum-simple         = <ows> <"enum"> <ws> identifier  <term>
enum-composite      = <ows> <"enum"> <ws> identifier  <blk-open> 
                      *( description
                       / value )
                      <blk-close> 

base                = <ows> <"base">                <ws> identifier     <term>
config              = <ows> <"config">              <ws> boolean        <term>
contact             = <ows> <"contact">             <ws> string         <term>
default             = <ows> <"default">             <ws> (identifier / string) <term>
description         = <ows> <"description">         <ws> string         <term>
error-message       = <ows> <"error-message">       <ws> string         <term>
length              = <ows> <"length">              <ws> string         <term>
mandatory           = <ows> <"mandatory">           <ws> boolean        <term>
namespace           = <ows> <"namespace">           <ws> string         <term>
organization        = <ows> <"organization">        <ws> string         <term>
pattern             = <ows> <"pattern">             <ws> string         <term>
prefix              = <ows> <"prefix">              <ws> identifier     <term>
presence            = <ows> <"presence">            <ws> string         <term>
reference           = <ows> <"reference">           <ws> string         <term>
value               = <ows> <"value">               <ws> (integer / string) <term>

token  =  identifier / string 

string = <quote-double> *(text-char-no-dquote) <quote-double> 

; An identifier MUST NOT start with (('X'|'x') ('M'|'m') ('L'|'l')) (i.e. 'xml' in any case)
identifier                      = identifier-start-char *identifier-body-char
<identifier-start-char>         = alpha / underscore
<identifier-body-char>          = alpha / underscore / digit / hyphen / colon

<text-char>                     = vis-char / char-whitespace
<text-char-no-dquote>           = vis-char-no-dquote / char-whitespace

blk-open                        = <ows> <'{'>
blk-close                       = <ows> <'}'>
term                            = <ows> <';'>
; Note that 4digit is the same as 4*4(digit); both mean exactly 4 digits
iso-date                        = 4digit '-' 2digit '-' 2digit
boolean                         = 'true' / 'false'

ws                              = 1*(<char-whitespace>)   ; whitespace           (1 or more chars)
ows                             =  *(<char-whitespace>)   ; optional whitespace: (0 or more chars)
<char-whitespace-horiz>         = (space / tab)        ; horizontal spacing
<char-whitespace-eol>           = (carriage-return / line-feed)  ; vertical   spacing (EOL chars)
<char-whitespace>               = (char-whitespace-horiz / char-whitespace-eol)        ; any spacing

<carriage-return>               = %x0D
<line-feed>                     = %x0A
<space>                         = %x20  ; space
<tab>                           = %x09  ; horizontal tab
<quote-single>                  = %x27  ; ' char
<quote-double>                  = %x22  ; ' char
<colon>                         = %x3A  ; : char
<dot>                           = %x2E  ; . char
<hyphen>                        = %x2D  ; - char
<underscore>                    = %x5F  ; _ char
<star>                          = %x2A  ; * char
<slash>                         = %x2F  ; / char
<alpha>                         = %x41-5A / %x61-7A     ; A-Z / a-z
<digit>                         = %x30-39   ; 0-9
<digits>                        = 1*digit   ; 1 or more digits
integer                         = [ '+' / '-' ] digits  ; digits with optional sign
<hex-digit>                     = digit / %x61 / %x62 / %x63 / %x64 / %x65 / %x66 ; only lower-case a..f
<vis-char>                      = %x21-7E ; visible (printing) characters
<vis-char-no-dquote>            = %x21    / %x23-7E ; all visible chars without quote-double
<vis-char-no-squote>            = %x21-26 / %x28-7E ; all visible chars without quote-single
<vis-char-no-quotes>            = %x21    / %x23-26 / %x28-7E ; all visible chars except both quotes

